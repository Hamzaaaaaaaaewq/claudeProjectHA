name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write

env:
  CI: true

jobs:
  # ========================================
  # Dependency Scanning
  # ========================================
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check npm vulnerabilities - Root
        run: |
          npm audit --json > npm-audit-root.json || true
          if [ -f npm-audit-root.json ]; then
            CRITICAL=$(jq '.metadata.vulnerabilities.critical // 0' npm-audit-root.json)
            HIGH=$(jq '.metadata.vulnerabilities.high // 0' npm-audit-root.json)
            echo "Root - Critical: $CRITICAL, High: $HIGH"
            if [ "$CRITICAL" -gt 0 ]; then
              echo "Critical vulnerabilities found!"
              exit 1
            fi
          fi

      - name: Check npm vulnerabilities - Frontend
        working-directory: frontend
        run: |
          npm audit --json > npm-audit-frontend.json || true
          if [ -f npm-audit-frontend.json ]; then
            CRITICAL=$(jq '.metadata.vulnerabilities.critical // 0' npm-audit-frontend.json)
            HIGH=$(jq '.metadata.vulnerabilities.high // 0' npm-audit-frontend.json)
            echo "Frontend - Critical: $CRITICAL, High: $HIGH"
            if [ "$CRITICAL" -gt 0 ]; then
              echo "Critical vulnerabilities found!"
              exit 1
            fi
          fi

  # ========================================
  # Secret Scanning
  # ========================================
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Detect secrets with detect-secrets
        run: |
          pip install detect-secrets
          detect-secrets scan --baseline .secrets.baseline || true
          detect-secrets audit .secrets.baseline || true

  # ========================================
  # SAST (Static Application Security Testing)
  # ========================================
  sast-scan:
    name: SAST Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Install ESLint security plugin
        run: |
          npm install -g eslint eslint-plugin-security eslint-plugin-no-secrets

      - name: Create security ESLint config
        run: |
          cat > .eslintrc.security.js << 'EOF'
          module.exports = {
            plugins: ['security', 'no-secrets'],
            extends: ['plugin:security/recommended'],
            rules: {
              'no-secrets/no-secrets': 'error',
              'security/detect-eval-with-expression': 'error',
              'security/detect-non-literal-regexp': 'error',
              'security/detect-non-literal-require': 'error',
              'security/detect-object-injection': 'error',
              'security/detect-possible-timing-attacks': 'error',
              'security/detect-unsafe-regex': 'error',
            },
          };
          EOF

      - name: Run security linting
        run: |
          npx eslint . --config .eslintrc.security.js --ext .js,.jsx,.ts,.tsx || true

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/typescript
            p/nodejs
        continue-on-error: true

  # ========================================
  # License Compliance
  # ========================================
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Install license checker
        run: npm install -g license-checker

      - name: Check licenses - Root
        run: |
          license-checker --production --summary --failOn "GPL;AGPL;LGPL;DBAD" || echo "License check completed"

      - name: Check licenses - Frontend
        working-directory: frontend
        run: |
          license-checker --production --summary --failOn "GPL;AGPL;LGPL;DBAD" || echo "License check completed"

  # ========================================
  # Container Security (if applicable)
  # ========================================
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: false # Enable when Docker images are created
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build test image
        run: |
          if [ -f Dockerfile ]; then
            docker build -t syriamart:test .
          fi

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'syriamart:test'
          format: 'sarif'
          output: 'container-trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'container-trivy-results.sarif'

  # ========================================
  # Security Report
  # ========================================
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, secret-scan, sast-scan, license-check]
    if: always()
    steps:
      - name: Create security report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "Date: $(date)" >> security-report.md
          echo "Repository: ${{ github.repository }}" >> security-report.md
          echo "Branch: ${{ github.ref }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Scan Results" >> security-report.md
          echo "" >> security-report.md
          
          echo "### Dependency Scanning" >> security-report.md
          echo "Status: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "### Secret Scanning" >> security-report.md
          echo "Status: ${{ needs.secret-scan.result }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "### SAST Scanning" >> security-report.md
          echo "Status: ${{ needs.sast-scan.result }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "### License Compliance" >> security-report.md
          echo "Status: ${{ needs.license-check.result }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Recommendations" >> security-report.md
          echo "1. Review and fix all HIGH and CRITICAL vulnerabilities" >> security-report.md
          echo "2. Ensure no secrets are committed to the repository" >> security-report.md
          echo "3. Keep all dependencies up to date" >> security-report.md
          echo "4. Follow secure coding practices" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 30

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const report = `## ðŸ”’ Security Scan Summary
            
            - **Dependency Scan**: ${{ needs.dependency-scan.result }}
            - **Secret Scan**: ${{ needs.secret-scan.result }}
            - **SAST Scan**: ${{ needs.sast-scan.result }}
            - **License Check**: ${{ needs.license-check.result }}
            
            View the full security report in the workflow artifacts.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
        continue-on-error: true