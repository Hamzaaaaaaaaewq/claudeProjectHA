name: Mandatory Standards Enforcement Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop, release/*]

env:
  MIN_COVERAGE: 85
  NODE_VERSION: '20'
  
jobs:
  # 1. Documentation Validation
  documentation-check:
    name: Documentation Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Check OpenAPI Specifications
        run: |
          # Validate all OpenAPI specs are up to date
          npm run validate:openapi
          
          # Check if API changes have corresponding spec updates
          git diff --name-only origin/main...HEAD | grep -E '\.(ts|js)$' | while read file; do
            if [[ $file == *"controller"* ]] || [[ $file == *"route"* ]]; then
              spec_file=$(echo $file | sed 's/src/docs\/api-specs/g' | sed 's/\.ts$/.yaml/g')
              if ! git diff --name-only origin/main...HEAD | grep -q "$spec_file"; then
                echo "ERROR: API change in $file but no update to specification"
                exit 1
              fi
            fi
          done
          
      - name: Check AsyncAPI Event Schemas
        run: |
          # Validate all event schemas
          npm run validate:asyncapi
          
          # Ensure event changes have schema updates
          git diff --name-only origin/main...HEAD | grep -E 'events?\.(ts|js)$' | while read file; do
            if ! git diff --name-only origin/main...HEAD | grep -q "asyncapi"; then
              echo "ERROR: Event change in $file but no AsyncAPI update"
              exit 1
            fi
          done
          
      - name: Verify README Updates
        run: |
          # Check if feature changes updated README
          if git diff --name-only origin/main...HEAD | grep -qE '^src/.*\.(ts|js)$'; then
            if ! git diff --name-only origin/main...HEAD | grep -q "README.md"; then
              echo "WARNING: Code changes detected but no README update"
            fi
          fi
          
      - name: ADR Requirement Check
        run: |
          # Check if architectural changes have ADR
          if git diff --name-only origin/main...HEAD | grep -qE '(architecture|config|package\.json)'; then
            if ! git diff --name-only origin/main...HEAD | grep -q "docs/adrs/"; then
              echo "ERROR: Architectural change requires new ADR"
              exit 1
            fi
          fi

  # 2. Contract Testing Validation
  contract-testing:
    name: Contract Test Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install Dependencies
        run: npm ci
        
      - name: Run API Contract Tests
        run: |
          npm run test:contracts:api
          
          # Verify contract tests exist for all APIs
          find src -name "*.controller.ts" | while read controller; do
            test_file=$(echo $controller | sed 's/src/test/g' | sed 's/\.ts$/.contract.test.ts/g')
            if [ ! -f "$test_file" ]; then
              echo "ERROR: Missing contract test for $controller"
              exit 1
            fi
          done
          
      - name: Run Event Contract Tests
        run: |
          npm run test:contracts:events
          
          # Verify negative scenarios
          npm run test:contracts:negative
          
      - name: Schema Compatibility Check
        run: |
          # Check backward compatibility for events
          npm run schema:compatibility:check

  # 3. Security Scanning
  security-gates:
    name: Security Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run SAST Scan
        if: ${{ secrets.SONAR_TOKEN != '' }}
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.qualitygate.wait=true
            
      - name: Skip SAST Scan (No SONAR_TOKEN)
        if: ${{ secrets.SONAR_TOKEN == '' }}
        run: |
          echo "::warning::SonarCloud scan skipped - SONAR_TOKEN not configured"
          echo "To enable SonarCloud scanning, please configure SONAR_TOKEN in repository secrets"
            
      - name: Dependency Security Scan
        if: ${{ secrets.SNYK_TOKEN != '' }}
        run: |
          # Snyk scan
          npm install -g snyk
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk test --severity-threshold=high
          
      - name: Skip Dependency Security Scan (No SNYK_TOKEN)
        if: ${{ secrets.SNYK_TOKEN == '' }}
        run: |
          echo "::warning::Snyk security scan skipped - SNYK_TOKEN not configured"
          echo "To enable Snyk scanning, please configure SNYK_TOKEN in repository secrets"
          
          # OWASP Dependency Check
          npm audit --audit-level=high
          
      - name: Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.pull_request.base.sha }}
          head: ${{ github.event.pull_request.head.sha }}
          
      - name: Container Security Scan
        if: contains(github.event.pull_request.labels.*.name, 'docker')
        run: |
          # Trivy scan for containers
          docker run --rm -v $PWD:/workspace aquasec/trivy:latest fs /workspace
          
      - name: License Compliance Check
        run: |
          npm install -g license-checker
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-3-Clause;BSD-2-Clause;ISC;CC0-1.0'

  # 4. Code Quality Enforcement
  code-quality:
    name: Code Quality Standards
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install Dependencies
        run: npm ci
        
      - name: ESLint Check
        run: |
          npm run lint
          # Ensure no errors
          if [ $? -ne 0 ]; then
            echo "ERROR: ESLint violations found"
            exit 1
          fi
          
      - name: Prettier Check
        run: |
          npm run format:check
          if [ $? -ne 0 ]; then
            echo "ERROR: Code formatting violations"
            exit 1
          fi
          
      - name: TypeScript Type Check
        run: |
          npm run type-check
          if [ $? -ne 0 ]; then
            echo "ERROR: TypeScript type errors"
            exit 1
          fi
          
      - name: Test Coverage Check
        run: |
          npm run test:coverage
          
          # Extract coverage percentage
          COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          
          if (( $(echo "$COVERAGE < $MIN_COVERAGE" | bc -l) )); then
            echo "ERROR: Coverage $COVERAGE% is below minimum $MIN_COVERAGE%"
            exit 1
          fi
          
      - name: Complexity Check
        run: |
          # Check cyclomatic complexity
          npm run complexity:check -- --max-complexity 10

  # 5. Dependency Management
  dependency-compliance:
    name: Dependency Management
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Check Dependency Documentation
        run: |
          # Verify all dependencies are documented
          node scripts/check-dependency-docs.js
          
      - name: Version Policy Check
        run: |
          # No wildcard versions
          if grep -E '"\*"|"\^[^0-9]|"~[^0-9]|"latest"' package.json; then
            echo "ERROR: Wildcard or 'latest' versions not allowed"
            exit 1
          fi
          
      - name: Update Policy Compliance
        run: |
          # Check for outdated dependencies
          npm outdated --json > outdated.json
          
          # Check critical updates
          node scripts/check-critical-updates.js outdated.json

  # 6. Integration Test Gate
  integration-validation:
    name: Integration Testing
    needs: [documentation-check, contract-testing, security-gates, code-quality]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Run Integration Tests
        run: |
          if [ ! -f package-lock.json ]; then
            echo "No package-lock.json found, generating..."
            npm install
          else
            npm ci
          fi
          npm run test:integration
          
      - name: Run E2E Tests
        run: |
          npm run test:e2e
          
      - name: Performance Benchmark
        run: |
          npm run test:performance
          
          # Check performance regression
          node scripts/check-performance-regression.js

  # 7. Final Compliance Report
  compliance-report:
    name: Generate Compliance Report
    needs: [documentation-check, contract-testing, security-gates, code-quality, dependency-compliance, integration-validation]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
        
      - name: Generate Compliance Report
        run: |
          node scripts/generate-compliance-report.js \
            --documentation=${{ needs.documentation-check.result }} \
            --contracts=${{ needs.contract-testing.result }} \
            --security=${{ needs.security-gates.result }} \
            --quality=${{ needs.code-quality.result }} \
            --dependencies=${{ needs.dependency-compliance.result }} \
            --integration=${{ needs.integration-validation.result }}
            
      - name: Upload Compliance Report
        uses: actions/upload-artifact@v4
        with:
          name: compliance-report
          path: compliance-report.html
          
      - name: Enforce Compliance
        run: |
          # Block merge if any check failed
          if [ "${{ contains(needs.*.result, 'failure') }}" = "true" ]; then
            echo "ERROR: Mandatory standards not met. Merge blocked."
            exit 1
          fi
          
      - name: Comment PR with Report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('compliance-report.md', 'utf8');
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: report
            });

  # Block deployment without compliance
  deployment-gate:
    name: Deployment Gate
    needs: [compliance-report]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')
    steps:
      - name: Verify Production Readiness
        run: |
          echo "All mandatory standards verified"
          echo "Deployment authorized"
          
      - name: Create Deployment Record
        run: |
          # Record compliance for audit
          echo "{
            \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
            \"commit\": \"${{ github.sha }}\",
            \"compliance\": \"PASSED\",
            \"enforced_standards\": [
              \"documentation\",
              \"contracts\",
              \"security\",
              \"quality\",
              \"dependencies\"
            ]
          }" > deployment-compliance.json